---
import Layout from "../layouts/Layout.astro";
import Search from "../icon/search.astro";
import Location from "../icon/location.astro";
import Humidity from "../icon/humidity.astro";
import Wind from "../icon/wind.astro";
import FeelsLike from "../icon/feelsLike.astro";
---

<Layout title="Clima App" description="Descubre el clima actual de tu ciudad!">
  <main
    class="body flex h-dvh max-w-96 flex-col justify-center gap-7 p-5 text-white"
  >
    <header class="box grid gap-2">
      <h1 class="text-center text-xl font-bold">Weather App</h1>
      <div class="inline-flex justify-center gap-3">
        <input
          class="input ssm:max-w-full rounded border border-gray-200 bg-transparent p-2 placeholder-slate-100"
          type="text"
          name="search"
          id="search"
          placeholder="Ingresa tu ciudad"
        />
        <button
          class="button rounded border border-gray-200 p-2 transition-transform hover:scale-110"
        >
          <Search class="w-7" />
        </button>
      </div>
    </header>

    <div class="box grid justify-center justify-items-center gap-2 text-center">
      <div class="cityLocationBox hidden w-full">
        <div class="inline-flex w-full items-center gap-1">
          <Location />
          <p class="cityLocationText font-bold">Ciudad</p>
        </div>
      </div>
      <img class="image" src="/404.png" alt="" width="200px" />
      <h1 class="textStart pt-4 text-2xl">
        Busca tu ciudad para consultar su clima actual!
      </h1>
      <div class="allContent hidden">
        <p class="temperature pl-8 text-8xl">29°</p>
        <p class="description text-2xl capitalize">Descripción</p>
        <div class="mt-3 grid justify-center">
          <div class="flex flex-col text-xl">
            <div class="inline-flex items-center justify-center gap-1">
              <FeelsLike />
              <p class="feelsLike"></p>
            </div>
            <div class="inline-flex gap-3">
              <div class="inline-flex w-28 items-center justify-center gap-1">
                <Wind />
                <p>Viento</p>
              </div>
              <p>|</p>
              <p class="wind justify-between">10km/h</p>
            </div>
            <div class="inline-flex gap-3">
              <div class="inline-flex w-28 items-center justify-center gap-1">
                <Humidity />
                <p class="">Humedad</p>
              </div>
              <p>|</p>
              <p class="hum w-12">54%</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="alertAllowLocation box inline-flex items-center gap-2">
      <h2 class="text-pretty">
        Concede el permiso de ubicación para detectar tu ciudad!
      </h2>
      <button class="allowLocationButton rounded border-2 border-solid p-2"
        >Habilitar!</button
      >
    </div>
  </main>
</Layout>

<style>
  .box {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(4.8px);
    -webkit-backdrop-filter: blur(4.8px);
    border: 1px solid rgba(255, 255, 255, 0.95);
    padding: 20px 20px;
  }
</style>

<script>
  // boton search
  const search = document.querySelector(".button")!;
  //API Key openweather
  const APIKey = "51b68ad4b053555b95e008a6151ccd48";

  // get content
  const body = document.querySelector(".body")!;
  const cityLocationBox = document.querySelector(".cityLocationBox")!;
  const cityLocationText = document.querySelector(".cityLocationText")!;
  const textTemperature = document.querySelector(".temperature")!;
  const textDescription = document.querySelector(".description")!;
  const textWind = document.querySelector(".wind")!;
  const textHum = document.querySelector(".hum")!;
  const image = document.querySelector(".image")!;
  const textStart = document.querySelector(".textStart")!;
  const allContent = document.querySelector(".allContent")!;
  const input = document.querySelector("input")!;
  const allowLocationButton = document.querySelector(".allowLocationButton")!;
  const alertAllowLocation = document.querySelector(".alertAllowLocation")!;
  const feelsLike = document.querySelector(".feelsLike")!;

  // Check resolution
  const checkResolutionHeight = (resolution: number) => {
    if (
      window.screen.height <= resolution &&
      localStorage.getItem("enableLocation") === "false"
    ) {
      body.classList.remove("h-dvh");
      body.classList.add("h-full");
    }
  };

  // check support location
  const getLocation = () => {
    if ("geolocation" in navigator) {
      const geoOptions: PositionOptions = {
        enableHighAccuracy: true, // high presicion
        timeout: 5000, // maximum response time
        maximumAge: 0, // disbale cache previus location
      };

      // get current location
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;

          alertAllowLocation.classList.add("hidden");

          getWeather({ lat: latitude, lon: longitude });

          localStorage.setItem("enableLocation", "true");
        },
        (error) => {
          console.error("Error al obtener la ubicación:", error.message);
          localStorage.setItem("enableLocation", "false");
          alertAllowLocation.classList.remove("hidden");
          checkResolutionHeight(900);
        },
        geoOptions,
      );
    } else {
      console.error("La geolocalización no está soportada en este navegador");
    }
  };

  // check in local storage
  if (localStorage.getItem("enableLocation") === "true") {
    alertAllowLocation.classList.add("hidden");
    getLocation();
  }

  // click button search
  allowLocationButton.addEventListener("click", () => {
    getLocation();
  });

  // keypress enter event
  input.addEventListener("keydown", (e) => {
    if (e.code === "Enter") {
      searchLatitude();
      checkResolutionHeight(900);
    }
  });

  // function search button
  search.addEventListener("click", () => {
    searchLatitude();
    checkResolutionHeight(900);
  });

  // function search latitude and more
  const searchLatitude = async () => {
    //get input value
    const city = document.querySelector("input")!.value;

    if (city == "") {
      return;
    }
    // fetch api latitude and longetude
    await fetch(
      `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=${APIKey}`,
    )
      .then((response) => response.json())
      .then((json) => {
        getWeather({ lat: json[0].lat, lon: json[0].lon });
      });
  };

  // funtion get weather
  const getWeather = async ({ lat, lon }: { lat: number; lon: number }) => {
    await fetch(
      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKey}&lang=sp&units=metric`,
    )
      .then((response) => response.json())
      .then((value) => {
        // change image weather
        switch (value.weather[0].main) {
          case "Clear":
            image.setAttribute("src", "/clear.png");
            break;

          case "Rain":
            image.setAttribute("src", "/rain.png");
            break;

          case "Snow":
            image.setAttribute("src", "/snow.png");
            break;

          case "Clouds":
            image.setAttribute("src", "/cloud.png");
            break;

          case "Mist":
            image.setAttribute("src", "/mist.png");
            break;

          case "Haze":
            image.setAttribute("src", "/haze.png");
            break;

          default:
            image.setAttribute("src", "/404.png");
            break;
        }

        // change classlist after load api
        textStart.classList.add("hidden");
        allContent.classList.remove("hidden");
        cityLocationBox.classList.remove("hidden");

        // insert data api
        cityLocationText.innerHTML = `${value.name}, ${value.sys.country}`;
        textTemperature.innerHTML = `${parseInt(value.main.temp)}°`;
        textDescription.innerHTML = `${value.weather[0].description}`;
        feelsLike.innerHTML = `Sensación de ${parseInt(
          value.main.feels_like,
        )}°`;
        textWind.innerHTML = `${parseInt(value.wind.speed)} km/h`;
        textHum.innerHTML = `${parseInt(value.main.humidity)}%`;
      });
  };
</script>
